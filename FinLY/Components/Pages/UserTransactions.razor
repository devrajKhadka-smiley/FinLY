@page "/transactions"
@using FinLY.Models
@using FinLY.Services
@inject AuthenticationStateService AuthService
@inject IUserTransactionServices UserTransactionService
@inject ITagsServices TagsServices
@inject IUserBalanceServicees UserBalawnceServicees

@if (AuthService.IsAuthenticated())
{
    <div class="top-nav">
        <div class="dash-left-side">
            <p>Welcome, @userName</p>
        </div>
        <div class="dash-right-side">
            <p>@todayDate</p>
        </div>
    </div>

    <div class="transaction_container">
        <div class="transaction_header">
            <h1 class="transaction_title">Transactions</h1>
            <button class="transaction_button btn btn-primary" @onclick="OpenAddTransactionModal">
                Add Transactions
            </button>
        </div>

        <hr style="border: none; height: 2px; background-color: black;">
        <div class="transaction_filters">
            <div class="filter-buttons d-flex align-items-center">
                <input type="date" class="form-control filter-input" required />
                <input type="date" class="form-control filter-input" required />
            </div>

            <div class="search d-flex align-items-center">
                <input type="text" class="search-input form-control" placeholder="Find Transaction by Title..."
                       @oninput="OnSearchQueryChanged" />
                <button class="search-clear-btn btn btn-outline-secondary" @onclick="ClearSearch">
                    <i class="bi bi-x-circle"></i>
                </button>
            </div>

        </div>

        <div class="transaction_table_container" style="margin-top: 20px;">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Type</th>
                        <th>Amount</th>
                        <th>Tag</th>
                        <th>Note</th>
                        <th>
                            Date
                            <span class="bi" style="cursor: pointer;">
                                @if (isSortedAscending)
                                {
                                    <i class="bi bi-arrow-down"></i> <!-- Down Arrow for Descending -->
                                }
                                else
                                {
                                    <i class="bi bi-arrow-up"></i> <!-- Up Arrow for Ascending -->
                                }
                            </span>
                        </th>

                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (filteredTransactions.Count > 0)
                    {
                        @foreach (var transaction in filteredTransactions)
                        {
                            <tr>
                                <td>@transaction.TransactionTitle</td>
                                <td>@transaction.TransactionType</td>
                                <td>@transaction.Amounts</td>
                                <td>@transaction.Tag</td>
                                <td>@transaction.Note</td>
                                <td>@transaction.TransactionDate?.ToString("yyyy-MM-dd")</td>
                                <td>
                                    <button @onclick="() => EditTransaction(transaction)" class="btn btn-warning" data-bs-toggle="offcanvas" data-bs-target="#editTransactionOffcanvas">
                                        Edit
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="7" class="text-center">No transactions found.</td>
                        </tr>
                    }
                </tbody>



            </table>
        </div>
    </div>
    <div class="transaction_tag">
        <div class="mb-3">
            <h3 for="transactionTag" class="form-label">Tag Filters</h3>
            <div id="transactionTag" class="scrollable-tags">
                @foreach (var tag in allTags)
                {
                    <div @onclick="() => SetTagSelected(tag.TagName)"
                         class="tag-item @(selectedTag == tag.TagName ? "selected" : "")">
                        <label for="tag_@tag.TagName">@tag.TagName</label>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Edit Transaction Offcanvas -->
    <div class="offcanvas offcanvas-end @offcanvasClass" tabindex="-1" id="editTransactionOffcanvas" aria-labelledby="editTransactionOffcanvasLabel">
        <div class="offcanvas-header">
            <h5 class="offcanvas-title" id="editTransactionOffcanvasLabel">Edit Transaction</h5>
            <button type="button" class="btn-close" @onclick="CloseEditTransactionOffcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body">
            <form>
                <div class="mb-3">
                    <label for="transactionTitle" class="form-label">Transaction Title</label>
                    <input type="text" @bind="transactionToEdit.TransactionTitle" class="form-control" required />
                </div>

                <div class="mb-3">
                    <label for="transactionAmount" class="form-label">Transaction Amount</label>
                    <input type="number" @bind="transactionToEdit.Amounts" class="form-control" step="0.01" required />
                </div>

                <div class="mb-3">
                    <label for="transactionNote" class="form-label">Note (Optional)</label>
                    <textarea @bind="transactionToEdit.Note" class="form-control" rows="3"></textarea>
                </div>

                <div class="mb-3">
                    <label for="TransactionDate">Transaction Date</label>
                    <input type="date" @bind="transactionToEdit.TransactionDate" class="form-control" />
                </div>

                <div class="mb-3">
                    <label for="transactionTag" class="form-label">Tag</label>
                    <input type="text" @bind="transactionToEdit.Tag" class="form-control" />
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseEditTransactionOffcanvas">Close</button>
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </div>
            </form>
        </div>
    </div>



    <!-- Add Transaction Modal -->
    <div class="modal fade @modalClass" id="addTransactionModal" tabindex="-1" aria-labelledby="addTransactionModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl">
            <div class="modal-content custom-modal">
                <div class="modal-header custom-modal-header">
                    <h5 class="modal-title" id="addTransactionModalLabel">Add Transaction</h5>
                    <button type="button" class="btn-close" @onclick="CloseAddTransactionModal" aria-label="Close"></button>
                </div>

                <div class="modal-body custom-modal-body d-flex">
                    <div class="left-column col-6">
                        <form @onsubmit="HandleSubmit">
                            <div class="mb-3">
                                <label for="Total Amount" class="form-label">Total Amount</label>
                                <h1>@userBalance?.AvailableBalancewithDebt</h1>
                            </div>

                            <div class="mb-3">
                                <label for="transactionType" class="form-label">Transaction Type</label>
                                <div class="btn-group w-100" role="group">
                                    <button type="button"
                                            class="btn @(newTransaction.TransactionType == "InFlow" ? "btn-primary" : "btn-outline-primary")"
                                            @onclick='() => SetTransactionType("InFlow")'>
                                        InFlow
                                    </button>
                                    <button type="button"
                                            class="btn @(newTransaction.TransactionType == "OutFlow" ? "btn-primary" : "btn-outline-primary")"
                                            @onclick='() => SetTransactionType("OutFlow")'>
                                        OutFlow
                                    </button>
                                </div>
                            </div>

                            <div class="mb-3">
                                <label for="transactionTitle" class="form-label">Transaction Title</label>
                                <input type="text" @bind="newTransaction.TransactionTitle" id="transactionTitle" class="form-control" placeholder="Enter a title for the transaction" required />
                            </div>

                            <div class="mb-3">
                                <label for="transactionAmount" class="form-label">Transaction Amount</label>
                                <input type="number" id="transactionAmount" class="form-control" @bind="newTransaction.Amounts" step="0.01" required />
                            </div>

                            <div class="mb-3">
                                <label for="transactionNote" class="form-label">Note (Optional)</label>
                                <textarea @bind="newTransaction.Note" id="transactionNote" class="form-control" rows="3"></textarea>
                            </div>
                        </form>
                    </div>

                    <div class="right-column col-6">
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">
                                @errorMessage
                            </div>
                        }

                        <div class="mb-3">
                            <label for="TransactionDate">Transaction Date</label>
                            <input type="date" id="TransactionDate" class="form-control" @bind="newTransaction.TransactionDate" />
                        </div>

                        <div class="mb-3">
                            <label for="transactionTag" class="form-label">Tag</label>
                            <div id="transactionTag" class="scrollable-tags">
                                @foreach (var tag in allTags)
                                {
                                    <div @onclick="() => SetTagSelected(tag.TagName)"
                                         class="tag-item @(selectedTag == tag.TagName ? "selected" : "")">
                                        <label for="tag_@tag.TagName">@tag.TagName</label>
                                    </div>
                                }
                            </div>
                        </div>




                        <div class="modal-footer custom-modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseAddTransactionModal">Close</button>
                            <button type="submit" @onclick="HandleSubmit" class="btn btn-primary">Add Transaction</button>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private UserTransaction newTransaction = new UserTransaction();
    private string userName;
    private UserTransaction transactionToEdit = new UserTransaction();
    private string todayDate;
    private bool isSuccess = false;
    private string selectedTag = string.Empty;
    private bool isError = false;
    private bool isModalOpen = false;
    private string modalClass => isModalOpen ? "show d-block" : "fade";
    private UserBalance userBalance = new UserBalance();
    private string offcanvasClass => isOffcanvasOpen ? "show" : "";
    private bool isOffcanvasOpen = false; // Controls the offcanvas visibility
    private string errorMessage;
    private bool isSortedAscending = false;
    private List<UserTransaction> filteredTransactions = new List<UserTransaction>();
    private string searchQuery = string.Empty; // To store the search query
    





    private List<Models.Tags> allTags = new List<Models.Tags>();
    private List<UserTransaction> userTransactions = new List<UserTransaction>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var user = AuthService.GetAuthenticatedUser();
            userName = user?.UserName ?? "Guest";
            todayDate = DateTime.Now.ToString("MMMM dd, yyyy");

            newTransaction.UserId = user?.UserId ?? Guid.Empty;
            newTransaction.TransactionType = "InFlow";

            if (user != null)
            {
                userName = user.UserName;
                allTags = await TagsServices.GetTagsByUserIdAsync(user.UserId);

                userTransactions = await UserTransactionService.GetTransactionsByUserIdAsync(user.UserId);
                filteredTransactions = new List<UserTransaction>(userTransactions);
                userBalance = await UserBalawnceServicees.GetUserBalanceAsync(user.UserId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing data: {ex.Message}");
        }
    }



    private void OpenAddTransactionModal()
    {
        isModalOpen = true; // Open the modal
    }

    private void CloseAddTransactionModal()
    {
        isModalOpen = false; // Close the modal
    }

    private async Task HandleSubmit()
    {
        try
        {
            if (newTransaction.TransactionType == "OutFlow" && newTransaction.Amounts > userBalance.AvailableBalancewithDebt)
            {
                errorMessage = "Amount exceeds the available balance!";
                return;
            }

            if (string.IsNullOrEmpty(newTransaction.TransactionTitle) || newTransaction.Amounts <= 0 || newTransaction.TransactionDate == null || string.IsNullOrEmpty(newTransaction.Tag))
            {
                errorMessage = "Please fill in all required fields!";
                return;
            }

            errorMessage = string.Empty;

            // Add the transaction
            await UserTransactionService.AddTransactionAsync(newTransaction);


            // Reload transactions after submission
            userTransactions = await UserTransactionService.GetTransactionsByUserIdAsync(newTransaction.UserId);

            await UserBalawnceServicees.UpdateUserBalanceAsync(newTransaction.UserId, newTransaction.Amounts, newTransaction.TransactionType);

            // Reset the form after successful submission
            newTransaction = new UserTransaction
                {
                    UserId = AuthService.GetAuthenticatedUser()?.UserId ?? Guid.Empty
                };

            // Close the modal
            isModalOpen = false;
        }
        catch (Exception ex)
        {
            isError = true;
            isSuccess = false;
            Console.WriteLine($"Error adding transaction: {ex.Message}");
        }
    }

    private void SetTransactionType(string transactionType)
    {
        newTransaction.TransactionType = transactionType;
    }

   

    private string GetTagClass(string tagName)
    {
        return selectedTag == tagName ? "selected" : "";
    }

    private void EditTransaction(UserTransaction transaction)
    {
        // Set the transaction data for editing
        transactionToEdit = new UserTransaction
            {
                TransactionTitle = transaction.TransactionTitle,
                Amounts = transaction.Amounts,
                Note = transaction.Note,
                TransactionDate = transaction.TransactionDate,
                Tag = transaction.Tag,
                UserId = transaction.UserId,
                TransactionType = transaction.TransactionType
            };

        // Open the off-canvas (not the modal)
        isOffcanvasOpen = true;
    }


    private void CloseEditTransactionOffcanvas()
    {
        isOffcanvasOpen = false;
        StateHasChanged();
    }

    private async Task HandleEditTransactionSubmit()
    {
        try
        {
            // Ensure the transaction is updated in the backend
            await UserTransactionService.UpdateTransactionAsync(transactionToEdit); // Update the transaction

            // Reload the transactions after updating
            userTransactions = await UserTransactionService.GetTransactionsByUserIdAsync(transactionToEdit.UserId);

            // Close the offcanvas after saving
            CloseEditTransactionOffcanvas(); // Ensure this method closes the offcanvas
            StateHasChanged();


        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating transaction: {ex.Message}");
        }
    }

    private void ApplyFilters()
    {
        filteredTransactions = userTransactions
            .Where(t =>
                (string.IsNullOrEmpty(selectedTag) || t.Tag == selectedTag) &&
                (string.IsNullOrEmpty(searchQuery) || t.TransactionTitle.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)))
            .ToList();

        StateHasChanged(); // Refresh the UI
    }

    private void SetTagSelected(string tagName)
    {
        selectedTag = selectedTag == tagName ? string.Empty : tagName;
        newTransaction.Tag = selectedTag;

        // Filter transactions based on the selected tag
        if (string.IsNullOrEmpty(selectedTag))
        {
            // If no tag is selected, show all transactions
            filteredTransactions = new List<UserTransaction>(userTransactions);
        }
        else
        {
            // Filter transactions by the selected tag
            filteredTransactions = userTransactions.Where(t => t.Tag == selectedTag).ToList();
        }

        StateHasChanged(); // Refresh the UI
        ApplyFilters();
    }

  
    private void OnSearchQueryChanged(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? string.Empty;

        ApplyFilters();
    }

    private void ClearSearch()
    {
        searchQuery = string.Empty;
        ApplyFilters();
    }


}
