@page "/transactions"
@using FinLY.Models
@using FinLY.Services
@inject AuthenticationStateService AuthService
@inject IUserTransactionServices UserTransactionService
@inject ITagsServices TagsServices
@inject IUserBalanceServicees UserBalawnceServicees
@inject IJSRuntime jsruntime



@if (AuthService.IsAuthenticated())
{
    <div class="top-nav">
        <div class="dash-left-side">
            <p>Welcome, @userName</p>
        </div>
        <div class="dash-right-side">
            <p>@todayDate</p>
        </div>
    </div>

    <div class="transaction_container">
        <div class="transaction_header">
            <h1 class="transaction_title">Transactions</h1>
            <button class="transaction_button btn btn-primary" @onclick="OpenAddTransactionModal">
                Add Transactions
            </button>
        </div>

        <hr style="border: none; height: 2px; background-color: black;">
        <div class="transaction_filters">
            <div class="filter-buttons d-flex align-items-center">
                <input type="date" class="form-control filter-input" value="@filterStartDate?.ToString("yyyy-MM-dd")" @onchange="FilterStartDate" required />
                <input type="date" class="form-control filter-input" value="@filterEndDate?.ToString("yyyy-MM-dd")" @onchange="FilterEndDate" required />
                <button class="btn reset-btn" @onclick="ResetFilters">Reset Filters</button>

            </div>

            <div class="search d-flex align-items-center">
                <input type="text" class="search-input form-control" placeholder="Find Transaction by Title..."
                @oninput="OnSearchQueryChanged" />
                <button class="      btn btn-outline-secondary" @onclick="ClearSearch">
                    <i class="bi bi-x-circle"></i>
                </button>
                <button type="button" class="transaction_button own-btn-secondary ms-2" @onclick="ExportAsCsv">
                    <i class="bi bi-download"></i>
                </button>


            </div>

        </div>

        <div class="transaction_table_container" style="margin-top: 20px;">
            <table class="table table-bordered table-scrollable">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>
                            Type
                            <span class="bi" style="cursor: pointer;" @onclick="SortByType">
                                @if (isTypeSortedAscending)
                                {
                                    <i class="bi-caret-up-fill"></i> 
                                }
                                else
                                {
                                    <i class="bi-caret-down-fill"></i> 
                                }
                            </span>
                        </th>

                        <th>Amount</th>
                        <th>Tag</th>
                        <th>Note</th>
                        <th>
                            Date
                            <span class="bi" style="cursor: pointer;" @onclick="SortByDate">
                                @if (isSortedAscending)
                                {
                                    <i class="bi-caret-up-fill"></i> 
                                }
                                else
                                {
                                    <i class="bi-caret-down-fill"></i> 
                                }
                            </span>
                        </th>

                        @* <th>Actions</th> *@
                    </tr>
                </thead>
                <tbody>
                    @if (filteredTransactions.Count > 0)
                    {
                        @foreach (var transaction in filteredTransactions)
                        {
                            <tr>
                                <td>@transaction.TransactionTitle</td>
                                <td>@transaction.TransactionType</td>
                                <td>@currencyType @transaction.Amounts</td>
                                <td>@transaction.Tag</td>
                                <td>@transaction.Note</td>
                                <td>@transaction.TransactionDate?.ToString("yyyy-MM-dd")</td>
                                @* <td> *@
                                @*     <button @onclick="() => EditTransaction(transaction)" class="edit-btn btn btn-warning" data-bs-toggle="offcanvas" data-bs-target="#editTransactionOffcanvas"> *@
                                @*         Edit *@
                                @*     </button> *@
                                @* </td> *@
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="7" class="text-center">No transactions found.</td>
                        </tr>
                    }
                </tbody>
            </table>

        </div>
    </div>
    @* <div class="transaction_tag"> *@
    @*     <div class="mb-3"> *@
    @*         <h3 for="transactionTag" class="form-label">Tag Filters</h3>    *@
    @*         <div id="transactionTag" class="scrollable-tags"> *@
    @*             @foreach (var tag in allTags) *@
    @*             { *@
    @*                 <div @onclick="() => SetTagSelected(tag.TagName)" *@
    @*                 class="tag-item @(selectedTag == tag.TagName ? "selected" : "")"> *@
    @*                     <label for="tag_@tag.TagName">@tag.TagName</label> *@
    @*                 </div> *@
    @*             } *@
    @*         </div> *@
    @*     </div> *@
    @* </div> *@

    <div class="transaction_tag">
        <div class="mb-3">
            <h3 for="transactionTag" class="form-label">Tag Filters</h3>
            <div id="transactionTag" class="scrollable-tags">
                @foreach (var tag in allTags)
                {
                    <div @onclick="() => SetFilterTagSelected(tag.TagName)"
                    class="tag-item @(selectedFilterTag  == tag.TagName ? "selected" : "")">
                        <label for="filter_tag_@tag.TagName">@tag.TagName</label>
                    </div>
                }
            </div>
        </div>
    </div>


    <!-- Edit Transaction Offcanvas -->
    @* <div class="offcanvas offcanvas-end @offcanvasClass" tabindex="-1" id="editTransactionOffcanvas" aria-labelledby="editTransactionOffcanvasLabel"> *@
    @*     <div class="offcanvas-header"> *@
    @*         <h5 class="offcanvas-title" id="editTransactionOffcanvasLabel">Edit Transaction</h5> *@
    @*         <button type="button" class="btn-close" @onclick="CloseEditTransactionOffcanvas" aria-label="Close"></button> *@
    @*     </div> *@
    @*     @if (!string.IsNullOrEmpty(errorMessage)) *@
    @*     { *@
    @*         <div class="alert alert-danger"> *@
    @*             @errorMessage *@
    @*         </div> *@
    @*     } *@

    @*     <div class="offcanvas-body"> *@
    @*         <form @onsubmit ="HandleEditTransactionSubmit"> *@
    @*             <div class="mb-3"> *@
    @*                 <label for="transactionTitle" class="form-label">Transaction Title</label> *@
    @*                 <input type="text" @bind="transactionToEdit.TransactionTitle" class="form-control" required /> *@
    @*             </div> *@

    @*             <div class="mb-3"> *@
    @*                 <label for="transactionAmount" class="form-label">Transaction Amount</label> *@
    @*                 <input type="number" @bind="transactionToEdit.Amounts" class="form-control" step="0.01" required /> *@
    @*             </div> *@

    @*             <div class="mb-3"> *@
    @*                 <label for="transactionNote" class="form-label">Note (Optional)</label> *@
    @*                 <textarea @bind="transactionToEdit.Note" class="form-control" rows="3"></textarea> *@
    @*             </div> *@

    @*             <div class="mb-3"> *@
    @*                 <label for="TransactionDate">Transaction Date</label> *@
    @*                 <input type="date" @bind="transactionToEdit.TransactionDate" class="form-control" /> *@
    @*             </div> *@

    @*             <div class="mb-3"> *@
    @*                 <label for="transactionTag" class="form-label">Tag</label> *@
    @*                 <input type="text" @bind="transactionToEdit.Tag" class="form-control" /> *@
    @*             </div> *@

    @*             <div class="modal-footer"> *@
    @*                 <button type="button" class="btn btn-secondary" @onclick="CloseEditTransactionOffcanvas">Close</button> *@
    @*                 <button type="submit" class="btn btn-primary">Save Changes</button> *@
    @*             </div> *@
    @*         </form> *@
    @*     </div> *@
    @* </div> *@



    <!-- Add Transaction Modal -->
    <div class="modal fade @modalClass" id="addTransactionModal" tabindex="-1" aria-labelledby="addTransactionModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl">
            <div class="modal-content custom-modal">
                <div class="modal-header custom-modal-header">
                    <h5 class="modal-title" id="addTransactionModalLabel">Add Transaction</h5>
                    <button type="button" class="btn-close" @onclick="CloseAddTransactionModal" aria-label="Close"></button>
                </div>

                <div class="modal-body custom-modal-body d-flex">
                    <div class="left-column col-6">
                        <form @onsubmit="HandleSubmit">
                            <div class="mb-3 center-content">
                                <label for="Total Amount" class="form-label">Total Amount</label>
                                <h1>@userBalance?.AvailableBalancewithDebt</h1>
                            </div>


                            <div class="mb-3">
                                <label for="transactionType" class="form-label">Transaction Type</label>
                                <div class="btn-group w-100" role="group">
                                    <button type="button"
                                    class="btn @(newTransaction.TransactionType == "InFlow" ? "btn-toggle" : "btn-untoggle")"
                                    @onclick='() => SetTransactionType("InFlow")'>
                                        InFlow
                                    </button>
                                    <button type="button"
                                    class="btn @(newTransaction.TransactionType == "OutFlow" ? "btn-toggle" : "btn-untoggle")"
                                    @onclick='() => SetTransactionType("OutFlow")'>
                                        OutFlow
                                    </button>
                                </div>
                            </div>

                            <div class="mb-3">
                                <label for="transactionTitle" class="form-label">Transaction Title</label>
                                <input type="text" @bind="newTransaction.TransactionTitle" id="transactionTitle" class="form-control" placeholder="Enter a title for the transaction" required />
                            </div>

                            <div class="mb-3">
                                <label for="transactionAmount" class="form-label">Transaction Amount</label>
                                <input type="number" id="transactionAmount" class="form-control" @bind="newTransaction.Amounts" step="0.01" required />
                            </div>

                            <div class="mb-3">
                                <label for="transactionNote" class="form-label">Note (Optional)</label>
                                <textarea @bind="newTransaction.Note" id="transactionNote" class="form-control" rows="3"></textarea>
                            </div>
                        </form>
                    </div>

                    <div class="right-column col-6">
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">
                                @errorMessage
                            </div>
                        }

                        <div class="mb-3">
                            <label for="TransactionDate">Transaction Date</label>
                            <input type="date" id="TransactionDate" class="form-control" @bind="newTransaction.TransactionDate" />
                        </div>

                        <div class="mb-3">
                            <label for="transactionTag" class="form-label">Tag</label>
                            <div id="transactionTag" class="scrollable-tags">
                                @foreach (var tag in allTags)
                                {
                                    <div @onclick="() => SetTagSelected(tag.TagName)"
                                    class="tag-item @(selectedTag == tag.TagName ? "selected" : "")">
                                        <label for="tag_@tag.TagName">@tag.TagName</label>
                                    </div>
                                }
                            </div>
                        </div>




                        <div class="modal-footer custom-modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseAddTransactionModal">Close</button>
                            <button type="submit" @onclick="HandleSubmit" class="add-btn btn ">Add Transaction</button>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private UserTransaction newTransaction = new UserTransaction();
    private string userName;
    private UserTransaction transactionToEdit = new UserTransaction();
    private string todayDate;
    private bool isSuccess = false;
    private string selectedTag = string.Empty;
    private bool isError = false;
    private bool isModalOpen = false;
    private string modalClass => isModalOpen ? "show d-block" : "fade";
    private UserBalance userBalance = new UserBalance();
    private string offcanvasClass => isOffcanvasOpen ? "show" : "";
    private bool isOffcanvasOpen = false; 
    private string errorMessage;
    private List<UserTransaction> filteredTransactions = new List<UserTransaction>();
    private string searchQuery = string.Empty; 
    private bool isSortedAscending = false; 
    private DateTime? filterStartDate;
    private DateTime? filterEndDate;
    private bool isTypeSortedAscending = false; 
    private string currencyType;
    private string selectedFilterTag;



    private List<Models.Tags> allTags = new List<Models.Tags>();
    private List<UserTransaction> userTransactions = new List<UserTransaction>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var user = AuthService.GetAuthenticatedUser();
            userName = user?.UserName ?? "Guest";
            todayDate = DateTime.Now.ToString("MMMM dd, yyyy");

            newTransaction.UserId = user?.UserId ?? Guid.Empty;
            newTransaction.TransactionType = "InFlow";

            if (user != null)
            {
                userName = user.UserName;
                currencyType = user.Currency;

                allTags = await TagsServices.GetTagsByUserIdAsync(user.UserId);

                userTransactions = await UserTransactionService.GetTransactionsByUserIdAsync(user.UserId);
                filteredTransactions = new List<UserTransaction>(userTransactions);
                userBalance = await UserBalawnceServicees.GetUserBalanceAsync(user.UserId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing data: {ex.Message}");
        }
    }

    private void OpenAddTransactionModal()
    {
        isModalOpen = true;
    }

    private void CloseAddTransactionModal()
    {
        isModalOpen = false; 
    }

    private async Task HandleSubmit()
    {
        try
        {
            if (newTransaction.TransactionType == "OutFlow" && newTransaction.Amounts > userBalance.AvailableBalancewithDebt)
            {
                errorMessage = "Amount exceeds the available balance!";
                return;
            }

            if (string.IsNullOrEmpty(newTransaction.TransactionTitle) || newTransaction.Amounts <= 0 || newTransaction.TransactionDate == null || string.IsNullOrEmpty(newTransaction.Tag))
            {
                errorMessage = "Please fill in all required fields!";
                return;
            }

            errorMessage = string.Empty;

            await UserTransactionService.AddTransactionAsync(newTransaction);


            userTransactions = await UserTransactionService.GetTransactionsByUserIdAsync(newTransaction.UserId);

            await UserBalawnceServicees.UpdateUserBalanceAsync(newTransaction.UserId, newTransaction.Amounts, newTransaction.TransactionType);

            await LoadUserData(newTransaction.UserId);

            newTransaction = new UserTransaction
                {
                    UserId = AuthService.GetAuthenticatedUser()?.UserId ?? Guid.Empty,
                    TransactionType = "InFlow"
                };


            isModalOpen = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            isError = true;
            isSuccess = false;
            Console.WriteLine($"Error adding transaction: {ex.Message}");
        }
    }

    private async Task LoadUserData(Guid userId)
    {
        userTransactions = await UserTransactionService.GetTransactionsByUserIdAsync(userId);

        filteredTransactions = new List<UserTransaction>(userTransactions);

        userBalance = await UserBalawnceServicees.GetUserBalanceAsync(userId);
    }

    private void SetTransactionType(string transactionType)
    {
        newTransaction.TransactionType = transactionType;
    }



    private string GetTagClass(string tagName)
    {
        return selectedTag == tagName ? "selected" : "";
    }

    // private void EditTransaction(UserTransaction transaction)
    // {
    //     transactionToEdit = new UserTransaction
    //         {
    //             TransactionTitle = transaction.TransactionTitle,
    //             Amounts = transaction.Amounts,
    //             Note = transaction.Note,
    //             TransactionDate = transaction.TransactionDate,
    //             Tag = transaction.Tag,
    //             UserId = transaction.UserId,
    //             TransactionType = transaction.TransactionType
    //         };

    //     isOffcanvasOpen = true;
    // }


    // private void CloseEditTransactionOffcanvas()
    // {
    //     isOffcanvasOpen = false;
    //     transactionToEdit = new UserTransaction(); 
    //     StateHasChanged();
    // }

    // private async Task HandleEditTransactionSubmit()
    // {
    //     try
    //     {
    //         if (string.IsNullOrEmpty(transactionToEdit.TransactionTitle) || transactionToEdit.Amounts <= 0 || transactionToEdit.TransactionDate == null || string.IsNullOrEmpty(transactionToEdit.Tag))
    //         {
    //             errorMessage = "Please fill in all required fields!";
    //             return;
    //         }

    //         errorMessage = string.Empty;

    //         Update the transaction
    //         await UserTransactionService.UpdateTransactionAsync(transactionToEdit);

    //         Refresh the transactions
    //         userTransactions = await UserTransactionService.GetTransactionsByUserIdAsync(transactionToEdit.UserId);
    //         filteredTransactions = new List<UserTransaction>(userTransactions);

    //         Close the offcanvas
    //         CloseEditTransactionOffcanvas();
    //     }
    //     catch (Exception ex)
    //     {
    //         errorMessage = $"Error updating transaction: {ex.Message}";
    //         Console.WriteLine(errorMessage);
    //     }
    //     finally
    //     {
    //         Ensure the UI updates regardless of the outcome
    //         StateHasChanged();
    //     }
    // }


    private void ApplyFilters()
    {
        filteredTransactions = userTransactions
            .Where(t =>
                (string.IsNullOrEmpty(selectedFilterTag) || t.Tag == selectedFilterTag) &&
                (string.IsNullOrEmpty(searchQuery) || t.TransactionTitle.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) &&
                (!filterStartDate.HasValue || t.TransactionDate >= filterStartDate) &&
                (!filterEndDate.HasValue || t.TransactionDate <= filterEndDate))
            .ToList();

        filteredTransactions = isTypeSortedAscending
            ? filteredTransactions.OrderBy(t => t.TransactionType).ToList()
            : filteredTransactions.OrderByDescending(t => t.TransactionType).ToList();

        if (isSortedAscending)
        {
            filteredTransactions = filteredTransactions.OrderBy(t => t.TransactionDate).ToList();
        }
        else
        {
            filteredTransactions = filteredTransactions.OrderByDescending(t => t.TransactionDate).ToList();
        }

        StateHasChanged(); 
    }


    private void SetTagSelected(string tagName)
    {
        selectedTag = selectedTag == tagName ? string.Empty : tagName;
        newTransaction.Tag = selectedTag;

        if (string.IsNullOrEmpty(selectedTag))
        {
            filteredTransactions = new List<UserTransaction>(userTransactions);
        }
        else
        {
            filteredTransactions = userTransactions.Where(t => t.Tag == selectedTag).ToList();
        }

        StateHasChanged(); 
        ApplyFilters();
    }

    private void SetFilterTagSelected(string tagName)
    {
        selectedFilterTag = selectedFilterTag == tagName ? string.Empty : tagName;
        StateHasChanged();
        ApplyFilters();
    }


    private void OnSearchQueryChanged(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? string.Empty;

        ApplyFilters();
    }

    private void ClearSearch()
    {
        searchQuery = string.Empty;
        ApplyFilters();
    }

    private void FilterStartDate(ChangeEventArgs e) {
        filterStartDate = DateTime.TryParse(e.Value?.ToString(), out var date) ? date : null;
        ApplyFilters();
    }

    private void FilterEndDate(ChangeEventArgs e) {
        filterEndDate = DateTime.TryParse(e.Value?.ToString(), out var date) ? date : null;
        ApplyFilters();
    }

    private void ResetFilters()
    {
        searchQuery = string.Empty;

        selectedFilterTag = string.Empty;

        filterStartDate = null;
        filterEndDate = null;

        filteredTransactions = new List<UserTransaction>(userTransactions);

        StateHasChanged();
    }

    private void SortByDate()
    {
        isSortedAscending = !isSortedAscending;

        filteredTransactions = isSortedAscending
            ? filteredTransactions.OrderBy(t => t.TransactionDate).ToList()
            : filteredTransactions.OrderByDescending(t => t.TransactionDate).ToList();

        StateHasChanged(); 
    }

    private void SortByType()
    {
        isTypeSortedAscending = !isTypeSortedAscending;

        filteredTransactions = isTypeSortedAscending
            ? filteredTransactions.OrderBy(t => t.TransactionType).ToList()
            : filteredTransactions.OrderByDescending(t => t.TransactionType).ToList();

        StateHasChanged(); 
    }

    private async Task ExportAsCsv()
    {
        var data = "Transaction Title, Transaction Type, Amount, Tag, Note, Date\n";
        var transactions = await UserTransactionService.GetTransactionsByUserIdAsync(AuthService.GetAuthenticatedUser().UserId);

        foreach (var transaction in transactions)
        {
            data += $"{transaction.TransactionTitle}, {transaction.TransactionType}, {transaction.Amounts}, {transaction.Tag}, {transaction.Note}, {transaction.TransactionDate}\n";
        }

        var encodedData = Uri.EscapeDataString(data);
        var user = AuthService.GetAuthenticatedUser();
        var userName = user?.UserName ?? "User";

        var fileName = $"{userName}_TransactionDetails.csv";
        var dataUri = $"data:text/csv;charset=utf-8,{encodedData}";

        var script = $@"
        var link  = document.createElement('a');
        link.href = '{dataUri}';
        link.download = '{fileName}';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    ";

        await jsruntime.InvokeVoidAsync("eval", script);
    }
}


