@page "/dashboard"
@using FinLY.Models
@using FinLY.Services
@inject AuthenticationStateService AuthService
@inject IDebtsServices debtService
@inject IUserTransactionServices transactionService
@inject IUserBalanceServicees userBalanceService

@if (userBalance != null)
{
    <div class="top-bar">

        <div class="top-nav">
            <div class="dash-left-side">
                <p>Welcome, @userName</p>
            </div>
            <div class="dash-right-side">
                <p>@todayDate</p>
            </div>
        </div>

        <div class="top-card-info">
            <div class="card av_balance">
                <div class="card-top">
                    <p>@currencyType @(userBalance?.AvailableBalance.ToString() ?? "N/A")</p>
                </div>
                <div class="card-btm">
                    <h4>Net Balance</h4>
                </div>
            </div>

            <div class="card av_debt_balance">
                <div class="card-top">
                    <p>@currencyType @(userBalance?.AvailableBalancewithDebt.ToString() ?? "N/A")</p>
                </div>
                <div class="card-btm">
                    <h4>Total Balance</h4>
                </div>
            </div>

            <div class="card total_inflow">
                <div class="card-top">
                    <p>@currencyType @(userBalance?.TotalCashInFlow.ToString() ?? "N/A")</p>
                </div>
                <div class="card-btm">
                    <h4>Total Cash InFlow</h4>
                </div>
            </div>

            <div class="card total_outflow">
                <div class="card-top">
                    <p>@currencyType @(userBalance?.TotalCashOutFlow.ToString() ?? "N/A")</p>
                </div>
                <div class="card-btm">
                    <h4>Total Cash OutFlow</h4>
                </div>
            </div>

            <div class="card total_debt_amount">
                <div class="card-top">
                    <p>@currencyType @(userBalance?.TotalDebtAmount.ToString() ?? "N/A")</p>
                </div>
                <div class="card-btm">
                    <h4>Total Debt Amount</h4>
                </div>
            </div>

            <div class="card remaining_debts">
                <div class="card-top">
                    <p>@currencyType @(userBalance?.DebtRemainingAmount.ToString() ?? "N/A")</p>
                </div>
                <div class="card-btm">
                    <h4>Remaining Debts</h4>
                </div>
            </div>

            <div class="card total_cleared_debts">
                <div class="card-top">
                    <p>@currencyType @(userBalance?.DebtClearedAmount.ToString() ?? "N/A")</p>
                </div>
                <div class="card-btm">
                    <h4>Total Cleared Debts</h4>
                </div>
            </div>
        </div>
    </div>
    <div class="basic-info">
        <div class="left-side">


            <div class="info-item inflow_info">
                <p>Transactions Count: @(transactions?.Count(t => t.Amounts > 0).ToString() ?? "0")</p>
            </div>


            <div class="info-item debt_info">
                <p>Debts Count: @(debts?.Count.ToString() ?? "0")</p>
            </div>


        </div>
        <div class="right-side">
            <input type="date" class="own-filter-input" value="@filterStartDate?.ToString("yyyy-MM-dd")" @onchange="FilterStartDate" required />
            <input type="date" class="own-filter-input" value="@filterEndDate?.ToString("yyyy-MM-dd")" @onchange="FilterEndDate" required />
        </div>
    </div>

    <div class="debts-section">
        <div class="div_pie">
            <BarChart @ref="barChart" Width="500" Height="300" />
        </div>

        <div class="div_table">

            <div class="debts-header">
                <h3>Your Debts</h3>
                <button class="btn own-btn-secondary" @onclick="ResetFilters">Reset Filters</button>
            </div>
            @if (debts != null && debts.Any())
            {
                <table class="debts-table">
                    <thead>
                        <tr>
                            <th>Debt Name</th>
                            <th>Total Amount</th>
                            <th>Remaining Amount</th>
                            <th>Debts Date</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var debt in filteredDebts.Where(d => d.DebtStatus == "Pending"))
                        {
                            <tr>
                                <td>@debt.DebtTitle</td>
                                <td>@currencyType @debt.TotalDebtAmount.ToString()</td>
                                <td>@currencyType @debt.RemainingAmount.ToString()</td>
                                <td>@debt.DueDate.ToString("MM/dd/yyyy")</td>
                                <td>@debt.DebtStatus</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>No debts found.</p>
            }
        </div>

    </div>

    <div class="transactions-section">
        <div class="transactions-header">
            <h3>Highest / Lowest Transaction</h3>
            <div class="sorting-button-container">
                <button class="btn own-sort-btn" @onclick="ToggleSortOrder">
                    @if (isAscending)
                    {
                        <span>Sort Highest</span>
                    }
                    else
                    {
                        <span>Sort Lowest</span>
                    }
                </button>
            </div>
            <div class="transaction-view-buttons">
                <button class="btn own-tran_btn" @onclick='async () => ToggleTransactionView("inflow")'>View Inflows</button>
                <button class="btn own-tran_btn" @onclick='async () => ToggleTransactionView("outflow")'>View Outflows</button>
                <button class="btn own-tran_btn" @onclick='async () => ToggleTransactionView("debts")'>View Debts</button>
            </div>

        </div>

        @if (transactions != null && transactions.Any())
        {
            <table class="transactions-table">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Transaction Type</th>
                        <th>Amount</th>
                        <th>Note</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var transaction in filteredTransactions)
                    {
                        <tr>
                            <td>@transaction.TransactionDate?.ToString("MM/dd/yyyy")</td>
                            <td>@transaction.TransactionType</td>
                            <td>@currencyType @transaction.Amounts.ToString()</td>
                            <td>@transaction.Note</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>No transactions found.</p>
        }
    </div>


}
else
{
    <p>Loading balance...</p>
}

@code {
    private ChartData chartData = default!;
    private BarChartOptions barChartOptions = default!;
    private BarChart barChart = default!;
}

@code {
    private UserBalance userBalance;
    private string userName;
    private string todayDate;
    private List<UserDebt> debts;
    private DateTime? filterStartDate;
    private DateTime? filterEndDate;
    private List<UserDebt> filteredDebts = new List<UserDebt>();
    private List<UserTransaction> transactions = new List<UserTransaction>();
    private string currencyType;
    private string currentView = "inflow";
    private List<UserTransaction> filteredTransactions = new List<UserTransaction>();
    private bool isAscending = false;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            var user = AuthService.GetAuthenticatedUser();
            if (user != null)
            {

                userBalance = await userBalanceService.GetUserBalanceAsync(user.UserId);
                currencyType = user.Currency;
                debts = await debtService.GetDebtsByUserIdAsync(user.UserId);


                filteredDebts = debts.OrderByDescending(debt => debt.TotalDebtAmount).Take(5).ToList();
                transactions = await transactionService.GetTransactionsByUserIdAsync(user.UserId);
                FilterTransactions();

            }

            userName = user?.UserName ?? "Guest";
            todayDate = DateTime.Now.ToString("MMMM dd, yyyy");
            filterStartDate = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1);
            filterEndDate = new DateTime(DateTime.Today.Year, DateTime.Today.Month, DateTime.DaysInMonth(DateTime.Today.Year, DateTime.Today.Month));
                ApplyFilters();


            InitializeBarChart();


        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dashboard: {ex.Message}");
        }
    }


    private void FilterStartDate(ChangeEventArgs e)
    {
        filterStartDate = DateTime.TryParse(e.Value?.ToString(), out var date) ? date : null;
        ApplyFilters();
    }

    private void FilterEndDate(ChangeEventArgs e)
    {
        filterEndDate = DateTime.TryParse(e.Value?.ToString(), out var date) ? date : null;
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        if (debts != null)
        {
            filteredDebts = debts.Where(debt =>
                (!filterStartDate.HasValue || debt.DueDate.Date >= filterStartDate.Value.Date) &&
                (!filterEndDate.HasValue || debt.DueDate.Date <= filterEndDate.Value.Date)
            ).ToList();
        }

        InitializeBarChart();
        StateHasChanged();
    }


    private void FilterTransactions()
    {
        if (transactions != null)
        {
            var sortedTransactions = transactions.AsQueryable();

            if (isAscending)
            {
                sortedTransactions = sortedTransactions.OrderBy(testc => testc.Amounts);
            }
            else
            {
                sortedTransactions = sortedTransactions.OrderByDescending(testc => testc.Amounts);
            }

            switch (currentView)
            {
                case "inflow":
                    filteredTransactions = sortedTransactions
                        .Where(testc => testc.TransactionType == "InFlow")
                        .Take(5)
                        .ToList();
                    break;
                case "outflow":
                    filteredTransactions = sortedTransactions
                        .Where(testc => testc.TransactionType == "OutFlow")
                        .Take(5)
                        .ToList();
                    break;
                case "debts":
                    filteredTransactions = debts
                        .Where(testc => testc.DebtStatus == "Pending" || testc.DebtStatus == "Paid")
                        .Select(debt => new UserTransaction
                            {
                                TransactionDate = debt.DueDate,
                                TransactionType = "Debt",
                                Amounts = debt.TotalDebtAmount,
                                Note = debt.DebtTitle
                            })
                        .OrderBy(testc => isAscending ? testc.Amounts : -testc.Amounts)
                        .Take(5)
                        .ToList();
                    break;

                default:
                    filteredTransactions = sortedTransactions
                        .Take(5)
                        .ToList();
                    break;
            }
        }
        StateHasChanged();
    }


    private async Task ToggleTransactionView(string view)
    {
        currentView = view;
        FilterTransactions();
        StateHasChanged();
        await Task.CompletedTask;
    }

    private void ToggleSortOrder()
    {
        isAscending = !isAscending;
        FilterTransactions();
    }

    private void InitializeBarChart()
    {
        var labels = filteredDebts.Select(debt => debt.DebtTitle).ToList();
        var datasets = new List<IChartDataset>();

        var dataset = new BarChartDataset
            {
                Data = filteredDebts.Select(debt => (double?)debt.TotalDebtAmount).ToList(),
                BackgroundColor = new List<string> { "#FF6384", "#36A2EB", "#FFCE56", "#4BC0C0", "#9966FF" },
                BorderColor = new List<string> { "#FF6384", "#36A2EB", "#FFCE56", "#4BC0C0", "#9966FF" },
                BorderWidth = new List<double> { 1 }
            };

        datasets.Add(dataset);

        chartData = new ChartData
            {
                Labels = labels,
                Datasets = datasets
            };

        barChartOptions = new BarChartOptions();
        barChartOptions.Responsive = true;
        barChartOptions.Interaction = new Interaction { Mode = InteractionMode.Y };
        barChartOptions.IndexAxis = "y";
        barChartOptions.Plugins.Legend.Display = false;
        /*barChartOptions = new BarChartOptions
    {
        Responsive = true,
        Scales = new ChartScales
        {
            X = new ChartAxis
            {
                Title = new ChartAxesTitle { Text = "Debt Titles", Display = true }
            },
            Y = new ChartAxis
            {
                Title = new ChartAxesTitle { Text = "Total Amount", Display = true }
            }
        },
        Plugins = new ChartOptionsPlugins
        {
            Legend = new ChartLegend { Display = false }
        }
    };*/
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await barChart.InitializeAsync(chartData, barChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private void ResetFilters()
    {
        filterStartDate = null;
        filterEndDate = null;

        filteredDebts = new List<UserDebt>(debts);
        InitializeBarChart();
        StateHasChanged();
    }

}
