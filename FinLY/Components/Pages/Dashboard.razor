@page "/dashboard"
@using FinLY.Models
@using FinLY.Services
@inject AuthenticationStateService AuthService
@inject IDebtsServices debtService
@inject IUserTransactionServices transactionService
@inject IUserBalanceServicees userBalanceService


@if (userBalance != null)
{
    <div class="top-bar">

        <div class="top-nav">
            <div class="dash-left-side">
                <p>Welcome, @userName</p>
            </div>
            <div class="dash-right-side">
                <p>@todayDate</p>
            </div>
        </div>

        <div class="top-card-info">
            <div class="card av_balance">
                <div class="card-top">
                    <p>@currencyType @( userBalance?.AvailableBalance.ToString() ?? "N/A")</p>
                </div>
                <div class="card-btm">
                    <h4>Net Balance</h4>
                </div>
            </div>

            <div class="card av_debt_balance">
                <div class="card-top">
                    <p>@currencyType @(userBalance?.AvailableBalancewithDebt.ToString() ?? "N/A")</p>
                </div>
                <div class="card-btm">
                    <h4>Total Balance</h4>
                </div>
            </div>

            <div class="card total_inflow">
                <div class="card-top">
                    <p>@currencyType @(userBalance?.TotalCashInFlow.ToString() ?? "N/A")</p>
                </div>
                <div class="card-btm">
                    <h4>Total Cash InFlow</h4>
                </div>
            </div>

            <div class="card total_outflow">
                <div class="card-top">
                    <p>@currencyType @(userBalance?.TotalCashOutFlow.ToString() ?? "N/A")</p>
                </div>
                <div class="card-btm">
                    <h4>Total Cash OutFlow</h4>
                </div>
            </div>

            <div class="card total_debt_amount">
                <div class="card-top">
                    <p>@currencyType @(userBalance?.TotalDebtAmount.ToString() ?? "N/A")</p>
                </div>
                <div class="card-btm">
                    <h4>Total Debt Amount</h4>
                </div>
            </div>

            <div class="card remaining_debts">
                <div class="card-top">
                    <p>@currencyType @(userBalance?.DebtRemainingAmount.ToString() ?? "N/A")</p>
                </div>
                <div class="card-btm">
                    <h4>Remaining Debts</h4>
                </div>
            </div>

            <div class="card total_cleared_debts">
                <div class="card-top">
                    <p>@currencyType @(userBalance?.DebtClearedAmount.ToString() ?? "N/A")</p>
                </div>
                <div class="card-btm">
                    <h4>Total Cleared Debts</h4>
                </div>
            </div>
        </div>
    </div>
    <div class="basic-info">
        <div class="left-side">

            
            <div class="info-item inflow_info">
                <p>Transactions Count: @(transactions?.Count(t => t.Amounts > 0).ToString() ?? "0")</p> <!-- Count individual inflows -->
            </div>


            <div class="info-item debt_info">
                <p>Debts Count: @(debts?.Count.ToString() ?? "0")</p>  <!-- Count of debts -->
            </div>


        </div>
        <div class="right-side">

            <input type="date" class="own-filter-input" value="@filterStartDate?.ToString("yyyy-MM-dd")" @onchange="FilterStartDate" required />
            <input type="date" class="own-filter-input" value="@filterEndDate?.ToString("yyyy-MM-dd")" @onchange="FilterEndDate" required />
        </div>
    </div>

    <div class="debts-section">
        <div class="div_pie">
            @* <PieChart @ref="pieChart" Width="150" /> *@
        </div>

        <div class="div_table">

            <div class="debts-header">
                <h3>Your Debts</h3>
                <button class="btn own-btn-secondary" @onclick="ResetFilters">Reset Filters</button>
            </div>
            @if (debts != null && debts.Any())
            {
                <table class="debts-table">
                    <thead>
                        <tr>
                            <th>Debt Name</th>
                            <th>Total Amount</th>
                            <th>Remaining Amount</th>
                            <th>Debts Date</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var debt in filteredDebts.Where(d => d.DebtStatus == "Pending"))
                        {
                            <tr>
                                <td>@debt.DebtTitle</td>
                                <td>@debt.TotalDebtAmount.ToString("C")</td>
                                <td>@debt.RemainingAmount.ToString("C")</td>
                                <td>@debt.DueDate.ToString("MM/dd/yyyy")</td>
                                <td>@debt.DebtStatus</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>No debts found.</p>
            }
        </div>

    </div>
}
else
{
    <p>Loading balance...</p>
}

@code {
    private UserBalance userBalance;
    private string userName;
    private string todayDate;
    private List<UserDebt> debts;
    private DateTime? filterStartDate;
    private DateTime? filterEndDate;
    private List<UserDebt> filteredDebts = new List<UserDebt>(); // Store filtered debts
    private List<UserTransaction> transactions = new List<UserTransaction>();
    private string currencyType;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var user = AuthService.GetAuthenticatedUser();
            if (user != null)
            {
                userBalance = await userBalanceService.GetUserBalanceAsync(user.UserId);
                currencyType = user.Currency;
                debts = await debtService.GetDebtsByUserIdAsync(user.UserId);
                filteredDebts = debts.OrderByDescending(debt => debt.TotalDebtAmount).Take(5).ToList(); // Initialize filtered debts with sorted debts initially
                transactions = await transactionService.GetTransactionsByUserIdAsync(user.UserId); // Fetch transactions


            }

            userName = user?.UserName ?? "Guest";
            todayDate = DateTime.Now.ToString("MMMM dd, yyyy");


        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dashboard: {ex.Message}");
        }
    }

    private void ResetFilters()
    {
        // Reset date range
        filterStartDate = null;
        filterEndDate = null;


        // Reset filtered transactions to the full list
        filteredDebts = new List<UserDebt>(debts); // Reset filtered debts to all debts
        StateHasChanged(); // Refresh the UI
    }
    private void FilterStartDate(ChangeEventArgs e)
    {
        filterStartDate = DateTime.TryParse(e.Value?.ToString(), out var date) ? date : null;
        ApplyFilters();
    }

    private void FilterEndDate(ChangeEventArgs e)
    {
        filterEndDate = DateTime.TryParse(e.Value?.ToString(), out var date) ? date : null;
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        // Filter debts based on date range
        if (debts != null)
            if (debts != null)
            {
                filteredDebts = debts.Where(debt =>
                    (!filterStartDate.HasValue || debt.DueDate >= filterStartDate.Value) &&
                    (!filterEndDate.HasValue || debt.DueDate <= filterEndDate.Value)
                ).ToList();
            }

        StateHasChanged();
    }

}

